@model Calmative.Web.App.Models.ViewModels.PortfolioViewModel

@{
    ViewData["Title"] = $"جزئیات پورتفولیو - {Model.Name}";
}

<div class="container">
    <!-- Portfolio Header -->
    <div class="card mb-4 fade-in">
        <div class="card-header">
            <div class="row align-items-center">
                <div class="col-md-8">
                    <h3><i class="fas fa-briefcase me-2"></i>@Model.Name</h3>
                    @if (!string.IsNullOrEmpty(Model.Description))
                    {
                        <p class="text-muted mb-0">@Model.Description</p>
                    }
                </div>
                <div class="col-md-4 text-end">
                    <a asp-controller="Asset" asp-action="Create" asp-route-portfolioId="@Model.Id" class="btn btn-success">
                        <i class="fas fa-plus me-2"></i>افزودن دارایی
                    </a>
                    <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-outline-primary">
                        <i class="fas fa-edit me-2"></i>ویرایش
                    </a>
                </div>
            </div>
        </div>
        <div class="card-body">
            <div class="row text-center">
                <div class="col-md-3">
                    <div class="stat-card">
                        <div class="stat-number">@Model.AssetCount</div>
                        <div class="stat-label">تعداد دارایی</div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="stat-card">
                        <div class="stat-number">@Model.TotalValue.ToString("N0") ریال</div>
                        <div class="stat-label">ارزش کل</div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="stat-card">
                        <div class="stat-number">@Model.TotalInvestment.ToString("N0") ریال</div>
                        <div class="stat-label">کل سرمایه‌گذاری</div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="stat-card @(Model.IsProfit ? "profit" : "loss")">
                        <div class="stat-number">
                            @(Model.IsProfit ? "+" : "")@Model.TotalProfitLoss.ToString("N0") ریال
                        </div>
                        <div class="stat-label">سود/زیان</div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Asset Type Distribution Chart -->
        <div class="col-md-6 mb-4">
            <div class="card fade-in">
                <div class="card-header">
                    <h5><i class="fas fa-chart-pie me-2"></i>توزیع انواع دارایی</h5>
                </div>
                <div class="card-body">
                    <div class="chart-container">
                        <canvas id="assetDistributionChart"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <!-- Performance Summary -->
        <div class="col-md-6 mb-4">
            <div class="card fade-in">
                <div class="card-header">
                    <h5><i class="fas fa-chart-line me-2"></i>خلاصه عملکرد</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <div class="d-flex justify-content-between">
                            <span>درصد سود/زیان کل:</span>
                            <span class="fw-bold @(Model.IsProfit ? "text-profit" : "text-loss")">
                                @(Model.IsProfit ? "+" : "")@Model.TotalProfitLossPercentage.ToString("F2")%
                            </span>
                        </div>
                    </div>
                    
                    @{
                        var assetDistributionForSummary = Model.Assets
                            .GroupBy(a => a.TypeDisplayName)
                            .Select(g => new {
                                AssetType = g.Key,
                                Percentage = Model.TotalValue > 0 ? (g.Sum(a => a.TotalValue) / Model.TotalValue) * 100 : 0
                            })
                            .OrderByDescending(d => d.Percentage)
                            .ToList();
                    }

                    @if (assetDistributionForSummary.Any())
                    {
                        <h6 class="mt-4">توزیع درصدی:</h6>
                        @foreach (var dist in assetDistributionForSummary)
                        {
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <span class="badge badge-@dist.AssetType.ToString().ToLower() text-dark">
                                    @dist.AssetType
                                </span>
                                <span class="fw-bold">@dist.Percentage.ToString("F1")%</span>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Assets List -->
    <div class="card fade-in">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5><i class="fas fa-list me-2"></i>دارایی‌های پورتفولیو</h5>
            <a asp-controller="Asset" asp-action="Create" asp-route-portfolioId="@Model.Id" class="btn btn-success">
                <i class="fas fa-plus me-2"></i>افزودن دارایی
            </a>
        </div>
        <div class="card-body">
            @if (Model.Assets.Any())
            {
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>نام دارایی</th>
                                <th>نوع</th>
                                <th>مقدار</th>
                                <th>قیمت خرید</th>
                                <th>قیمت فعلی</th>
                                <th>ارزش کل</th>
                                <th>سود/زیان</th>
                                <th>درصد سود/زیان</th>
                                <th>عملیات</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var asset in Model.Assets)
                            {
                                <tr>
                                    <td>
                                        <strong>@asset.Name</strong>
                                        @if (!string.IsNullOrEmpty(asset.Symbol))
                                        {
                                            <br><small class="text-muted">@asset.Symbol</small>
                                        }
                                    </td>
                                    <td>
                                        <span class="badge badge-@asset.Type.ToString().ToLower() text-dark">
                                            @asset.TypeDisplayName
                                        </span>
                                    </td>
                                    <td>@asset.Quantity.ToString("N2")</td>
                                    <td>@asset.PurchasePrice.ToString("N0") ریال</td>
                                    <td>@asset.CurrentPrice.ToString("N0") ریال</td>
                                    <td class="fw-bold">@asset.TotalValue.ToString("N0") ریال</td>
                                    <td class="fw-bold @(asset.IsProfit ? "text-profit" : "text-loss")">
                                        @(asset.IsProfit ? "+" : "")@asset.ProfitLoss.ToString("N0") ریال
                                    </td>
                                    <td class="fw-bold @(asset.IsProfit ? "text-profit" : "text-loss")">
                                        @(asset.IsProfit ? "+" : "")@asset.ProfitLossPercentage.ToString("F2")%
                                    </td>
                                    <td>
                                        <div class="btn-group btn-group-sm">
                                            <a asp-controller="Asset" asp-action="Edit" asp-route-id="@asset.Id" asp-route-portfolioId="@Model.Id" class="btn btn-outline-primary" title="ویرایش">
                                                <i class="fas fa-edit"></i>
                                            </a>
                                            <button type="button" class="btn btn-outline-info js-toggle-chart" title="نمودار قیمت" data-asset-id="@asset.Id">
                                                <i class="fas fa-chart-line"></i>
                                            </button>
                                            <button type="button" class="btn btn-outline-danger" title="حذف" onclick="confirmDeleteAsset(@asset.Id, '@asset.Name')">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                                <tr class="price-chart-row" id="chart-row-@asset.Id" style="display: none;">
                                    <td colspan="9">
                                        <div class="chart-container" style="height: 250px;">
                                            <canvas id="price-chart-@asset.Id"></canvas>
                                        </div>
                                        <div class="text-center small text-muted mt-2">نمودار تغییرات قیمت</div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="text-center py-5">
                    <i class="fas fa-chart-line fa-3x text-muted mb-3"></i>
                    <h5>هیچ دارایی‌ای در این پورتفولیو وجود ندارد</h5>
                    <p class="text-muted">برای شروع، اولین دارایی خود را اضافه کنید.</p>
                    <a asp-controller="Asset" asp-action="Create" asp-route-portfolioId="@Model.Id" class="btn btn-success">
                        <i class="fas fa-plus me-2"></i>افزودن اولین دارایی
                    </a>
                </div>
            }
        </div>
    </div>

    <!-- Back Button -->
    <div class="text-center mt-4">
        <a asp-action="Index" class="btn btn-secondary btn-lg">
            <i class="fas fa-arrow-left me-2"></i>بازگشت به لیست پورتفولیوها
        </a>
    </div>
</div>

<!-- Delete Asset Confirmation Modal -->
<div class="modal fade" id="deleteAssetModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">تأیید حذف دارایی</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>آیا از حذف دارایی "<span id="assetName"></span>" اطمینان دارید؟</p>
                <div class="alert alert-warning">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    این عمل قابل بازگشت نیست.
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">انصراف</button>
                <form id="deleteAssetForm" method="post" class="d-inline">
                    <button type="submit" class="btn btn-danger">
                        <i class="fas fa-trash me-2"></i>حذف
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Add event listeners for chart toggle buttons
            document.querySelectorAll('.js-toggle-chart').forEach(button => {
                button.addEventListener('click', function() {
                    const assetId = this.dataset.assetId;
                    togglePriceChart(assetId, this); // 'this' is now the button
                });
            });

            // Asset Distribution Chart
            @if (Model.Assets.Any())
            {
                var assetDistribution = Model.Assets
                    .GroupBy(a => a.TypeDisplayName)
                    .Select(g => new
                    {
                        AssetType = g.Key,
                        Value = g.Sum(a => a.TotalValue)
                    })
                    .ToList();

                <text>
                var ctx = document.getElementById('assetDistributionChart').getContext('2d');
                if (ctx) {
                    new Chart(ctx, {
                        type: 'doughnut',
                        data: {
                            labels: [@Html.Raw(string.Join(", ", assetDistribution.Select(d => $"'{d.AssetType}'")))],
                            datasets: [{
                                data: [@string.Join(", ", assetDistribution.Select(d => d.Value.ToString()))],
                                backgroundColor: [
                                    '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF', '#FF9F40'
                                ]
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            plugins: {
                                legend: {
                                    position: 'bottom',
                                },
                                tooltip: {
                                    callbacks: {
                                        label: function(context) {
                                            let label = context.label || '';
                                            if (label) {
                                                label += ': ';
                                            }
                                            if (context.parsed !== null) {
                                                label += new Intl.NumberFormat('fa-IR').format(context.parsed) + ' ریال';
                                            }
                                            return label;
                                        }
                                    }
                                }
                            }
                        }
                    });
                }
                </text>
            }
        });

        // Client-side storage for charts
        let activeCharts = {};

        // Function to toggle the visibility of the price chart
        function togglePriceChart(assetId, button) {
            const chartRow = document.getElementById(`chart-row-${assetId}`);
            const chartCanvas = document.getElementById(`price-chart-${assetId}`);
            const icon = button.querySelector('i');

            if (chartRow.style.display === 'none' || !chartRow.style.display) {
                // If chart is not visible, fetch data and show it
                fetch(`/Portfolio/GetAssetPriceHistory/${assetId}`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        console.log("Price history data received:", data); // Log received data
                        
                        // Destroy existing chart instance if it exists
                        if (activeCharts[assetId]) {
                            activeCharts[assetId].destroy();
                        }

                        if (data && data.length > 0) {
                            const labels = data.map(d => new Date(d.timestamp).toLocaleDateString('fa-IR'));
                            const prices = data.map(d => d.price);

                            const ctx = chartCanvas.getContext('2d');
                            activeCharts[assetId] = new Chart(ctx, {
                                type: 'line',
                                data: {
                                    labels: labels,
                                    datasets: [{
                                        label: 'تغییرات قیمت',
                                        data: prices,
                                        borderColor: '#36A2EB',
                                        backgroundColor: 'rgba(54, 162, 235, 0.2)',
                                        fill: true,
                                        tension: 0.1
                                    }]
                                },
                                options: {
                                    responsive: true,
                                    maintainAspectRatio: false,
                                    scales: {
                                        y: {
                                            ticks: {
                                                callback: function(value, index, values) {
                                                    return new Intl.NumberFormat('fa-IR').format(value) + ' ریال';
                                                }
                                            }
                                        }
                                    },
                                    plugins: {
                                        tooltip: {
                                            callbacks: {
                                                label: function(context) {
                                                    let label = context.dataset.label || '';
                                                    if (label) {
                                                        label += ': ';
                                                    }
                                                    if (context.parsed.y !== null) {
                                                        label += new Intl.NumberFormat('fa-IR').format(context.parsed.y) + ' ریال';
                                                    }
                                                    return label;
                                                }
                                            }
                                        }
                                    }
                                }
                            });
                        } else {
                            console.log("No price history available for asset " + assetId);
                            const ctx = chartCanvas.getContext('2d');
                            ctx.clearRect(0, 0, chartCanvas.width, chartCanvas.height);
                            ctx.font = "16px Vazirmatn";
                            ctx.fillStyle = "#888";
                            ctx.textAlign = "center";
                            ctx.fillText("داده‌ای برای نمایش نمودار وجود ندارد.", chartCanvas.width / 2, chartCanvas.height / 2);
                        }

                        // Show the row and change icon
                        chartRow.style.display = 'table-row';
                        icon.classList.remove('fa-chart-line');
                        icon.classList.add('fa-times');
                    })
                    .catch(error => {
                        console.error('Error fetching price history:', error);
                        // Optionally, show an error message to the user
                        chartRow.style.display = 'table-row';
                        const ctx = chartCanvas.getContext('2d');
                        ctx.clearRect(0, 0, chartCanvas.width, chartCanvas.height);
                        ctx.font = "16px Vazirmatn";
                        ctx.fillStyle = "red";
                        ctx.textAlign = "center";
                        ctx.fillText("خطا در بارگذاری نمودار.", chartCanvas.width / 2, chartCanvas.height / 2);
                    });
            } else {
                // If chart is visible, hide it
                chartRow.style.display = 'none';
                icon.classList.remove('fa-times');
                icon.classList.add('fa-chart-line');

                // Destroy the chart instance when hiding
                if (activeCharts[assetId]) {
                    activeCharts[assetId].destroy();
                    delete activeCharts[assetId];
                }
            }
        }

        // Delete Asset Confirmation
        function confirmDeleteAsset(assetId, assetName) {
            $('#assetName').text(assetName);
            var form = $('#deleteAssetForm');
            form.attr('action', `/Asset/Delete/${assetId}?portfolioId=@Model.Id`);
            var modal = new bootstrap.Modal(document.getElementById('deleteAssetModal'));
            modal.show();
        }
    </script>
} 